/*
 * Calculator example with basic operator overloading (sort of).
 */

{
  let {BinaryNode, UnaryNode, SpecialPrim, NumericPrim} = require("./nodes");
}

start
  = body:additive ws* { return body.evaluate(); }

additive
  = lh:mult ws* op:additive_op ws* rh:additive { return new BinaryNode({lh, op, rh}); }
  / mult

mult
  = lh:unary ws* op:mult_op ws* rh:mult { return new BinaryNode({lh, op: op, rh}); }
  / unary

unary
  = op:unary_op bh:primary { return new UnaryNode({bh, op}); }
  / primary

primary
  = specialteger
  / integer
  / "(" additive:additive ")" { return additive; }

additive_op = "+" / "-"
mult_op = "*" / "/"
unary_op = "--" / "++" / "-" / "+"

specialteger
  = "s_" digits:[0-9]+ { return new SpecialPrim({value: digits.join("")}); }

integer "integer"
  = digits:[0-9]+ { return new NumericPrim({value: digits.join("")}); }

ws
  = [ \t\r\n] { return null; }
